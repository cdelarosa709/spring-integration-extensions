/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'gopalk' at '7/29/16 8:10 PM' with Gradle 2.13
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.13/userguide/tutorial_java_projects.html
 */
description = 'Spring Integration LogInsight Support'
buildscript {
	repositories {
		maven { url 'http://repo.spring.io/plugins-release' }
		
	}
	dependencies {
		classpath 'io.spring.gradle:docbook-reference-plugin:0.3.1'
		classpath 'io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'
	}
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply from:   "${rootProject.projectDir}/publish-maven.gradle"
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'

if (project.hasProperty('platformVersion')) {
	apply plugin: 'spring-io'

	dependencyManagement {
		springIoTestRuntime {
			imports {
				mavenBom "io.spring.platform:platform-bom:${platformVersion}"
			}
		}
	}
}

group = 'org.springframework.integration'

repositories {
	maven { url 'http://repo.spring.io/libs-milestone' }
	if (project.hasProperty('platformVersion')) {
		maven { url 'https://repo.spring.io/snapshot' }
	}
	maven { url 'https://oss.sonatype.org/content/repositories/releases/'}
//	maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

//repositories {
//    jcenter()
//}

sourceCompatibility = targetCompatibility = 1.8

//// In this section you declare the dependencies for your production and test code
//dependencies {
//    // The production code uses the SLF4J logging API at compile time
//    compile 'org.slf4j:slf4j-api:1.7.21'
//
//    // Declare the dependency for your favourite test framework you want to use in your tests.
//    // TestNG is also supported by the Gradle Test task. Just change the
//    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
//    // 'test.useTestNG()' to your build script.
//    testCompile 'junit:junit:4.12'
//}


ext {

	jodaTimeVersion = '2.3'
//	splunkVersion = '1.5.0.0'
	springIntegrationVersion = '4.2.2.RELEASE'

	linkHomepage = 'https://github.com/spring-projects/spring-integration-splunk'
	linkCi       = 'https://build.spring.io/browse/INTEXT'
	linkIssue    = 'https://jira.spring.io/browse/INTEXT'
	linkScmUrl           = 'https://github.com/spring-projects/spring-integration-splunk'
	linkScmConnection    = 'https://github.com/spring-projects/spring-integration-splunk.git'
	linkScmDevConnection = 'git@github.com:spring-projects/spring-integration-splunk.git'

	shortName = 'loginsight'
}

jacoco {
	toolVersion = "0.7.2.201409121644"
}

dependencies {
//	compile "com.splunk:splunk:$splunkVersion"
	compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
	compile "joda-time:joda-time:$jodaTimeVersion"
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.1'
	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.1'
	compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.1'
	compile "org.apache.commons:commons-lang3:3.0"
	compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.2'
	compile 'org.apache.commons:commons-configuration2:2.0'
	
	compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
	compile 'org.apache.commons:commons-pool2:2.0'
	compile "javax.validation:validation-api:1.1.0.Final"
	compile 'org.codehaus.groovy:groovy-all:2.4.5'
	compile 'org.apache.httpcomponents:httpasyncclient:4.1-beta1'
	compile 'org.apache.httpcomponents:httpclient:4.5'
	compile 'org.apache.httpcomponents:fluent-hc:4.5.2'
	compile group: 'commons-io', name: 'commons-io', version: '2.5'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.7.5'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.5'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.7.5'
	compile 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.7.5'
	compile 'com.vmware.loginsightapi:loginsight-java-api:0.1.1'

	compile "net.sourceforge.jtds:jtds:1.3.1"

	testCompile "org.springframework.integration:spring-integration-test:$springIntegrationVersion"
	testCompile 'org.mockito:mockito-core:1.10.19'
	testCompile "org.springframework.integration:spring-integration-stream:$springIntegrationVersion"
}


eclipse {
	project {
		natures += 'org.springframework.ide.eclipse.core.springnature'
	}
}

sourceSets {
	test {
		resources {
			srcDirs = ['src/test/resources', 'src/test/java']
		}
	}
}



// enable all compiler warnings; individual projects may customize further
[compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all,-options']

test {
	// suppress all console output during testing unless running `gradle -i`
	logging.captureStandardOutput(LogLevel.INFO)
	maxHeapSize = "1024m"
	jacoco {
		append = false
		destinationFile = file("$buildDir/jacoco.exec")
	}
}

jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination "${buildDir}/reports/jacoco/html"
	}
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

//apply plugin: 'docbook-reference'

//reference {
//	sourceDir = file('src/reference/docbook')
//}

//apply plugin: 'sonar-runner'

//sonarRunner {
//	sonarProperties {
//		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
//		property "sonar.links.homepage", linkHomepage
//		property "sonar.links.ci", linkCi
//		property "sonar.links.issue", linkIssue
//		property "sonar.links.scm", linkScmUrl
//		property "sonar.links.scm_dev", linkScmDevConnection
//		property "sonar.java.coveragePlugin", "jacoco"
//	}
//}

task api(type: Javadoc) {
	group = 'Documentation'
	description = 'Generates aggregated Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.overview = 'src/api/overview.html'
	source subprojects.collect { project ->
		project.sourceSets.main.allJava
	}
	destinationDir = new File(buildDir, "api")
	classpath = files(subprojects.collect { project ->
		project.sourceSets.main.compileClasspath
	})
}

task schemaZip(type: Zip) {
	group = 'Distribution'
	classifier = 'schema'
	description = "Builds -${classifier} archive containing all " +
			"XSDs for deployment at static.springframework.org/schema."

	def Properties schemas = new Properties();

	project.sourceSets.main.resources.find {
		it.path.endsWith("META-INF${File.separator}spring.schemas")
	}?.withInputStream { schemas.load(it) }

	for (def key : schemas.keySet()) {
		File xsdFile = project.sourceSets.main.resources.find {
			it.path.replaceAll('\\\\', '/').endsWith(schemas.get(key))
		}
		assert xsdFile != null
		into ("integration/${shortName}") {
			from xsdFile.path
		}
	}
}

//task docsZip(type: Zip) {
//		group = 'Distribution'
//		classifier = 'docs'
//		description = "Builds -${classifier} archive containing api and reference " +
//			"for deployment at static.springframework.org/spring-integration/docs."
//
//		from('src/dist') {
//			include 'changelog.txt'
//		}
//
//		from (api) {
//			into 'api'
//		}
//
//		from (reference) {
//			into 'reference'
//		}
//}

//task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
task distZip(type: Zip, dependsOn: [schemaZip]) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
		"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'readme.txt'
		include 'license.txt'
		include 'notice.txt'
		into "${baseDir}"
	}

//	from(zipTree(docsZip.archivePath)) {
//		into "${baseDir}/docs"
//	}

	from(zipTree(schemaZip.archivePath)) {
		into "${baseDir}/schema"
	}

	subprojects.each { subproject ->
		into ("${baseDir}/libs") {
			from subproject.jar
			from subproject.sourcesJar
			from subproject.javadocJar
		}
	}
}

// Create an optional "with dependencies" distribution.
// Not published by default; only for use when building from source.
task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
	group = 'Distribution'
	classifier = 'dist-with-deps'
	description = "Builds -${classifier} archive, containing everything " +
		"in the -${distZip.classifier} archive plus all dependencies."

	from zipTree(distZip.archivePath)

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(":${zipTask.name}")) {
			def projectNames = rootProject.subprojects*.name
			def artifacts = new HashSet()
			subprojects.each { subproject ->
				subproject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
					def dependency = artifact.moduleVersion.id
					if (!projectNames.contains(dependency.name)) {
						artifacts << artifact.file
					}
				}
			}

			zipTask.from(artifacts) {
				into "${distZip.baseDir}/deps"
			}
		}
	}
}

artifacts {
	archives distZip
//	archives docsZip
	archives schemaZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and -schema distribution archives.'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '3.0'
	distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}
